@model HomeIndexVM
@{
    ViewData["Title"] = "Index";
}

@section SectionName{
    <header class="masthead text-center text-white">

        <div class="masthead-content">
            <h1 class="masthead-heading mb-0 d-flex justify-content-center">Welcome to WasteLand</h1>
            <p style="font-size: larger">En tredjedel av all mat som produceras i Sverige varje år slängs - ett riktigt WasteLand. Det vill vi ändra på. Vill du?</p>


            @if (!((Context.User != null) && Context.User.Identity.IsAuthenticated))
            {
                <a asp-controller="user" asp-action="signup" class="btn btn-primary btn-xl rounded-pill mt-5">Registrera</a>
                <a asp-controller="info" asp-action="about" class="btn btn-primary btn-xl rounded-pill mt-5">Om oss</a>
            }
            else
            {
                <a asp-controller="item" asp-action="add" class="btn btn-primary btn-xl rounded-pill mt-5">Lägg till mat</a>
                <a asp-controller="info" asp-action="about" class="btn btn-primary btn-xl rounded-pill mt-5">Om oss</a>
            }
        </div>

        <div class="bg-circle-1 bg-circle"></div>
        <div class="bg-circle-2 bg-circle"></div>
        <div class="bg-circle-3 bg-circle"></div>
        <div class="bg-circle-4 bg-circle"></div>
    </header>
    <body>
        @*<section id="whyWasteland">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-lg-6 order-lg-2">
                            <div class="p-5">
                                <img class="img-fluid rounded-circle" src="~/images/14076.jpg" alt="<p>WWF's goal is to: <q>Build a future where people live in harmony with nature.</q></p>">
                            </div>
                        </div>
                        <div class="col-lg-6 order-lg-1">
                            <div class="p-5">
                                <h2 class="display-4">Varför Wasteland?</h2>
                                <partial name="_PartialWhyUseWasteland" model="Model" />
                            </div>
                        </div>
                    </div>
                </div>
            </section>*@
        <section id="whyWasteland">
            <div class="container p-5">
                <div class="row align-items-center justify-content-center">

                    <div class="justify-content-center">
                        <partial name="_PartialWhyUseWasteland" model="Model" />
                    </div>
                    <div>
                        <br />
                        @*<div class="p-5">
                                <img class="img-fluid rounded" src="~/images/14076copy.jpg" alt="<p>WWF's goal is to: <q>Build a future where people live in harmony with nature.</q></p>">
                            </div>*@
                        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                            <ol class="carousel-indicators">
                                <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                                <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                                <li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
                            </ol>
                            <div class="carousel-inner">
                                <div class="carousel-item active">
                                    <img class="d-block w-100 img-fluid rounded" src="~/images/14076copy.jpg" alt="First slide">
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100 " src="~/images/14055copy.jpg" alt="Second slide">
                                </div>
                                <div class="carousel-item">
                                    <img class="d-block w-100" src="~/images/O7MF460copy.jpg" alt="Third slide">
                                </div>
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        @*@{
            var myChart = new Chart(width: 600, height: 400)
            .AddTitle("Chart Title")
            .AddSeries(
            name: "Employee",
            xValue: new[] { "Peter", "Andrew", "Julie", "Mary", "Dave" },
            yValues: new[] { "2", "6", "4", "5", "3" })
            .Write();
            }*@
        <div class="card w-50 mx-auto">
            @*<div class="card-header">
                    Citat
                </div>*@
            <div class="card-body">
                <blockquote class="blockquote mb-0">
                    <cite title="Source Title">
                        "Wasteland har förändrat mitt liv och mina konsumtionsvanor..."
                    </cite>
                    <footer class="blockquote-footer">Henrik, <cite title="Source Title">Stockholm</cite></footer>
                </blockquote>
            </div>
        </div>

        <section id="howItWorks">
            <div class="p-5">
                <partial name="_PartialHowItWorks" model="Model" /> <br />
            </div>
        </section>

        <section id="savedFood">
            <div class="p-5">
                <partial name="_PartialSavedFood" model="Model" /> <br />
            </div>
        </section>

        <section id="inspiration">
            <div>
                <partial name="_PartialInspiration" model="Model" /> <br />
            </div>
            @*<div class="container">
                    <div class="row align-items-center">
                            <partial name="_PartialInspiration" model="Model" />
                    </div>
                </div>*@
        </section>
    </body>
}

@section scripts {
    <script>
        (function ($) {
            $.fn.countTo = function (options) {
                options = options || {};

                return $(this).each(function () {
                    // set options for current element
                    var settings = $.extend({}, $.fn.countTo.defaults, {
                        from: $(this).data('from'),
                        to: $(this).data('to'),
                        speed: $(this).data('speed'),
                        refreshInterval: $(this).data('refresh-interval'),
                        decimals: $(this).data('decimals')
                    }, options);

                    // how many times to update the value, and how much to increment the value on each update
                    var loops = Math.ceil(settings.speed / settings.refreshInterval),
                        increment = (settings.to - settings.from) / loops;

                    // references & variables that will change with each update
                    var self = this,
                        $self = $(this),
                        loopCount = 0,
                        value = settings.from,
                        data = $self.data('countTo') || {};

                    $self.data('countTo', data);

                    // if an existing interval can be found, clear it first
                    if (data.interval) {
                        clearInterval(data.interval);
                    }
                    data.interval = setInterval(updateTimer, settings.refreshInterval);

                    // initialize the element with the starting value
                    render(value);

                    function updateTimer() {
                        value += increment;
                        loopCount++;

                        render(value);

                        if (typeof (settings.onUpdate) == 'function') {
                            settings.onUpdate.call(self, value);
                        }

                        if (loopCount >= loops) {
                            // remove the interval
                            $self.removeData('countTo');
                            clearInterval(data.interval);
                            value = settings.to;

                            if (typeof (settings.onComplete) == 'function') {
                                settings.onComplete.call(self, value);
                            }
                        }
                    }

                    function render(value) {
                        var formattedValue = settings.formatter.call(self, value, settings);
                        $self.html(formattedValue);
                    }
                });
            };

            $.fn.countTo.defaults = {
                from: 0,               // the number the element should start at
                to: 0,                 // the number the element should end at
                speed: 1000,           // how long it should take to count between the target numbers
                refreshInterval: 100,  // how often the element should be updated
                decimals: 0,           // the number of decimal places to show
                formatter: formatter,  // handler for formatting the value before rendering
                onUpdate: null,        // callback method for every time the element is updated
                onComplete: null       // callback method for when the element finishes updating
            };

            function formatter(value, settings) {
                return value.toFixed(settings.decimals);
            }
        }(jQuery));

        jQuery(function ($) {
            // custom formatting example
            $('.count-number').data('countToOptions', {
                formatter: function (value, options) {
                    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
                }
            });

            // start all the timers
            $('.timer').each(count);

            function count(options) {
                var $this = $(this);
                options = $.extend({}, options || {}, $this.data('countToOptions') || {});
                $this.countTo(options);
            }
        });
    </script>
}